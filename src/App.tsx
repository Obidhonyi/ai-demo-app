import React, { useState, useEffect, ReactNode } from 'react';
import { Calculator, Code, Database, Zap, Github, ExternalLink } from 'lucide-react';
import './App.css';

interface Feature {
  icon: ReactNode;
  title: string
  description: string
  color: string
}

const features: Feature[] = [
  {
    icon: <Code size={24} />,
    title: 'Code Generation',
    description: 'Write, edit, and debug code in any language',
    color: 'from-blue-500 to-blue-600'
  },
  {
    icon: <Database size={24} />,
    title: 'Data Analysis',
    description: 'Process and visualize data with Python, R, or SQL',
    color: 'from-green-500 to-green-600'
  },
  {
    icon: <Calculator size={24} />,
    title: 'Problem Solving',
    description: 'Debug issues and optimize performance',
    color: 'from-purple-500 to-purple-600'
  },
  {
    icon: <Zap size={24} />,
    title: 'Rapid Prototyping',
    description: 'Build MVPs and proof-of-concepts quickly',
    color: 'from-orange-500 to-orange-600'
  }
]

const App: React.FC = () => {
  const [currentTime, setCurrentTime] = useState(new Date())
  const [clickCount, setClickCount] = useState(0)
  const [apiData, setApiData] = useState<any>(null)
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date())
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  const fetchApiData = async () => {
    setLoading(true)
    try {
      const response = await fetch('http://localhost:3001/api/demo')
      const data = await response.json()
      setApiData(data)
    } catch (error) {
      console.error('Failed to fetch API data:', error)
      setApiData({ error: 'API not available' })
    } finally {
      setLoading(false)
    }
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', {
      hour12: true,
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    })
  }

  return (
    <div className="app">
      <div className="container">
        <header className="header">
          <h1>ðŸ¤– AI Coding Assistant Demo</h1>
          <p>Real-time demonstration of AI capabilities</p>
          <div className="time-display">
            <span>Current time: {formatTime(currentTime)}</span>
          </div>
        </header>

        <div className="stats-grid">
          <div className="stat-card">
            <h3>Interactive Counter</h3>
            <div className="counter">
              <span className="count">{clickCount}</span>
              <button 
                onClick={() => setClickCount(prev => prev + 1)}
                className="counter-btn"
              >
                Click me!
              </button>
            </div>
          </div>

          <div className="stat-card">
            <h3>API Integration</h3>
            <button 
              onClick={fetchApiData}
              disabled={loading}
              className="api-btn"
            >
              {loading ? 'Loading...' : 'Fetch Data'}
            </button>
            {apiData && (
              <div className="api-response">
                <pre>{JSON.stringify(apiData, null, 2)}</pre>
              </div>
            )}
          </div>
        </div>

        <div className="features-section">
          <h2>What I Can Do For You</h2>
          <div className="features-grid">
            {features.map((feature, index) => (
              <div key={index} className="feature-card">
                <div className={`feature-icon ${feature.color}`}>
                  {feature.icon}
                </div>
                <h3>{feature.title}</h3>
                <p>{feature.description}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="code-example">
          <h3>Live Code Example</h3>
          <div className="code-block">
            <pre>{`// This React component was generated by AI
const App = () => {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <h1>Count: {count}</h1>
      <button onClick={() => setCount(count + 1)}>
        Increment
      </button>
    </div>
  );
};`}</pre>
          </div>
        </div>

        <footer className="footer">
          <p>
            <Github size={16} />
            <a href="https://github.com" target="_blank" rel="noopener noreferrer">
              View on GitHub
              <ExternalLink size={14} />
            </a>
          </p>
        </footer>
      </div>
    </div>
  )
}

export default App
